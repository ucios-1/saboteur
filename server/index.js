const app = require("express")();
const http = require("http").createServer(app);
const io = require("socket.io")(http, {
    cors: {
        origin: "*"
    }, 
    pingTimeout: 60000
});
const _ = require("lodash");
const PORT = process.env.PORT || 4000;

var saboteur1List = [];
var saboteur2List = []; //create list of games to render

function addPlayerToGame(obj, playerID) {
    obj.playersIDs = [playerID]; //add additional parameter to the object
    obj.playersNames = [obj.playerName]; //add additional parameter to the object
    obj.players = [ { id: playerID, name: obj.playerName } ]
    return obj;
}

io.on("connection", socket => {
    console.log(socket.id); // remove it later. Check if connected, and log user id (id is generated by socket)

    socket.on("getGamesList", arg => {
        if (arg === "1") {
            socket.emit("sendGamesList1", saboteur1List);
        } else {
            socket.emit("sendGamesList2", saboteur2List);
        }
    });

    socket.on("getGameData", (v, arg, callback) => {
        if (v === "1") {
            const game = _.find(saboteur1List, { gameID: arg });
            if (game) {
                socket.join(game.gameID); // join game room (room name = gameID) if found
                callback(game); //send back data about the game
            } else {
                callback("game not found");
            }
        } else if (v === "2") {
            const game = _.find(saboteur2List, { gameID: arg });
            if (game) {
                socket.join(game.gameID); // join game room if found
                callback(game); //send back data about the game
            } else {
                callback("game not found"); // inform if game not found
            }
        } else {
            callback("version is undefined"); // inform if version undefined, error while emiting message to the server
        }
    });

    socket.on("addGame", (v, arg, callback) => {
        arg = addPlayerToGame(arg, socket.id);

        if (v === "1") {
            saboteur1List.push(_.omit(arg, "playerName"));
            io.emit("sendGamesList1", saboteur1List);
            console.log(saboteur1List);
        } else if (v === "2") {
            saboteur2List.push(_.omit(arg, "playerName"));
            io.emit("sendGamesList2", saboteur2List);
        } else {
            console.log("version is undefined");
        }

        callback({status: "created"}); // send a callback to the socket with status
    });

    // allow user connect to chosen game
    socket.on("gameConnect", (id) => {
        //
        console.log("user trying to connect to the gameID " + id);
    });

    socket.on("disconnecting", () => {
        console.log("Socket disconnected from: " + socket.id) 
        
        socket.rooms.forEach((val) => { /* loop through the loop of the socket rooms */
            saboteur1List.map(el => {
                if(el.gameID === val) { /* check if any of rooms is equal to gameIDs in saboter array, if true remove socked id from playersIDs array*/
                    // remove player from array if his id = to disconnected socket id
                    el.players = el.players.filter(player => player.id !== socket.id);
                }
            });
        });

        // remove game record if players.length === 0
        saboteur1List.map(el => {
            if (el.players.length === 0) {
                saboteur1List = saboteur1List.filter(element => element.players != 0 ); 
            }
        });
        console.log(saboteur1List);
    })

});

http.listen(PORT, () => console.log("listening on port " + PORT));